from string import maketrans
import base64

chunk1_start = 0x0084100E
chunk2_start = 0x0087DDF7
xor_key = [0x00, 0x26, 0x8D, 0xD6, 0xE4, 0x29, 0xE9, 0xBF, 0x79, 0x42, 
  0x87, 0xCE, 0xA5, 0xD5, 0x2E, 0x3D, 0x7B, 0xF1, 0xC0, 0xE5, 
  0xC2, 0x83, 0x0F, 0x3E, 0x75, 0x98, 0x0E, 0x55, 0xAE]
trick_alphabet = "kftUcHjqgu1ZPRSAIWsGOE39DYNiQlCdMe6bBym5/Tp0aKrFX2w8hJoxLnV4v7z+"
b64_alphabet   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

strlist_start = 0x427C48
strlist_end = 0x428258

def decrypt_func(start, length):
    for i in range(length) :
        addr = start + i
        citext = idc.get_wide_byte(addr)
        plaintext = citext ^ xor_key[i % len(xor_key)]
        idc.patch_byte(addr, plaintext)

def decrypt_all_funcs():
    func_addr = chunk1_start
    idx = 0
    length = idc.get_wide_word(chunk1_start + idx*2)

    while length:
        idx += 1
        func_addr += length
        length = idc.get_wide_word(chunk1_start + idx*2)
        if length == 0:
            break
        elif length > 0x0FFF0:
            break
            #idx2 = length - 0x0FFF0
            #length = idc.get_wide_dword(chunk2_start + idx2*4)

        print("from: ")
        print(hex(func_addr))
        print("to: ")
        print(hex(func_addr + length))
        print("\n")
        decrypt_func(func_addr, length)

def custom_b64decoder(citext, alphabet):
    citext += "=" * (4 - len(citext) % 4) 
    citext = citext.translate(maketrans(alphabet, b64_alphabet))
    plaintext = base64.b64decode(citext)
    return plaintext

def get_str(addr):
    res = bytearray()
    length = 0
    data = idc.get_wide_byte(addr+length)

    while data:
        res.append(data)
        length += 1
        data = idc.get_wide_byte(addr+length)

    return res


def traverse_trick_strlist():
    str_addr = strlist_start + 4

    while str_addr < strlist_end:
        cur_str = idc.get_wide_dword(str_addr)
        citext = get_str(cur_str)
        plaintext = custom_b64decoder(citext, trick_alphabet)
        idc.set_cmt(str_addr, plaintext, 1)
        str_addr += 4

def detrick_str_by_offset(str_off):
    str_addr = strlist_start + (str_off-1)*4
    cur_str = idc.get_wide_dword(str_addr)
    citext = get_str(cur_str)
    plaintext = custom_b64decoder(citext, trick_alphabet)

    return plaintext
    

def detrick_str():
    #get xrefs to get_str_and_link_api first argument -> 1st push
    for addr in idautils.XrefsTo(0x0401A70 , flags=0):
        target = addr.frm
        while idc.print_insn_mnem(target) != "push":
            target = idc.prev_head(target)
        if idc.get_operand_type(target, 0) == 5: #immediate
            str_off = idc.get_operand_value(target, 0)
            plaintext = detrick_str_by_offset(str_off)
            idc.set_cmt(target, plaintext, 1)
            idc.set_cmt(addr.frm, plaintext, 1)


    #get xref to get_str_fast -> second argument -> 2nd push
    for addr in idautils.XrefsTo(0x04052A0 , flags=0):
        target = addr.frm
        arg_count = 2
        while arg_count > 0:
            target = idc.prev_head(target)
            if idc.print_insn_mnem(target) == "push":
                arg_count -= 1
        if idc.get_operand_type(target, 0) == 5: #immediate
            str_off = idc.get_operand_value(target, 0)
            plaintext = detrick_str_by_offset(str_off)
            idc.set_cmt(target, plaintext, 1)
            idc.set_cmt(addr.frm, plaintext, 1)

    #get xref to get_str_safe second argument -> 2nd push
    for addr in idautils.XrefsTo(0x0407180 , flags=0):
        target = addr.frm
        arg_count = 2
        while arg_count > 0:
            target = idc.prev_head(target)
            if idc.print_insn_mnem(target) == "push":
                arg_count -= 1
        if idc.get_operand_type(target, 0) == 5: #immediate
            str_off = idc.get_operand_value(target, 0)
            plaintext = detrick_str_by_offset(str_off)
            idc.set_cmt(target, plaintext, 1)
            idc.set_cmt(addr.frm, plaintext, 1)


    # get the index
    # get the encrypted str
    # decrypt
    # add comment
    


    



    



