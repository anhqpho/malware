using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
					
public class Program
{
	public static void Main()
	{
		byte[] cipherText;
		byte[] plainText  = {0xFF,0xD8,0xFF,0xE0,0x00,0x10,0x4A,0x46,0x49,0x46,0x00,0x01,0x02,0x01,0x00,0x60,0x00,0x60,0x00,0x00,0xFF,0xEE,0x00,0x0E,0x41,0x64,0x6F,0x62,0x65,0x00,0x64,0x00};
		
		cipherText = encrypt(plainText);
		Console.WriteLine(BitConverter.ToString(cipherText).Replace("-",""));
		Console.WriteLine(BitConverter.ToString(decrypt(cipherText)).Replace("-",""));

	}
	
	public static byte[] decrypt(byte[] cipherText)
	{
		UTF8Encoding utf8Encoding = new UTF8Encoding();
		byte[] bytes  = utf8Encoding.GetBytes("nRzY7VKoOyfauQEqEWC2Dx9vlILp0AGB");
		byte[] bytes2 = utf8Encoding.GetBytes("n5Kq91XTymWeFvGN6DgZu5J2r4O8L9Bl");
		//byte[] bytes = utf8Encoding.GetBytes("8b%CA2o{a}4KGg&75Sz!L$3jcX/96iH*");
		//byte[] bytes2 = utf8Encoding.GetBytes("0badc0debadc0de10badc0debadc0de1");
		byte[] result;
		using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
		{
			try
			{
				rijndaelManaged.Padding = PaddingMode.Zeros;
				rijndaelManaged.Mode = CipherMode.CBC;
				rijndaelManaged.KeySize = 256;
				rijndaelManaged.BlockSize = 256;
				rijndaelManaged.Key = bytes;
				rijndaelManaged.IV = bytes2;
				MemoryStream memoryStream = new MemoryStream();
				using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(bytes, bytes2), CryptoStreamMode.Write))
				{
					cryptoStream.Write(cipherText, 0, cipherText.Length);
					result = memoryStream.ToArray();
				}
			}
			finally
			{
				rijndaelManaged.Clear();
			}
		}
		return result;
	}
	
	public static byte[] encrypt(byte[] plainText)
	{
		UTF8Encoding utf8Encoding = new UTF8Encoding();
		byte[] bytes = utf8Encoding.GetBytes("nRzY7VKoOyfauQEqEWC2Dx9vlILp0AGB");
		byte[] bytes2 = utf8Encoding.GetBytes("n5Kq91XTymWeFvGN6DgZu5J2r4O8L9Bl");
		byte[] result;
		using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
		{
			try
			{
				rijndaelManaged.Padding = PaddingMode.Zeros;
				rijndaelManaged.Mode = CipherMode.CBC;
				rijndaelManaged.KeySize = 256;
				rijndaelManaged.BlockSize = 256;
				rijndaelManaged.Key = bytes;
				rijndaelManaged.IV = bytes2;
				MemoryStream memoryStream = new MemoryStream();
				using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(bytes, bytes2), CryptoStreamMode.Write))
				{
					cryptoStream.Write(plainText, 0, plainText.Length);
					result = memoryStream.ToArray();
				}
			}
			finally
			{
				rijndaelManaged.Clear();
			}
		}
		return result;
	}
}
