import base64
import os.path
import argparse
from Crypto.Cipher import AES
from Crypto.Hash import SHA1


def decrypt_config(data, key):
    iv = "_46?wM=J2nZs-8m+"
    iv = bytearray(iv, 'ascii')
    key = bytearray(key, 'utf-8')
    base = key

    for i in range(99):
        hash_method = SHA1.new()
        hash_method.update(base)
        base = hash_method.digest()
    
    hash_method = SHA1.new()
    hash_method.update(base)
    chunk = hash_method.digest()

    chunk_extra = bytearray(21)
    #Adding the prefix 48 (base) + 1 (num extra chunk)
    chunk_extra[0] = 49
    chunk_extra[1:] = base[:]
    hash_method = SHA1.new()
    hash_method.update(chunk_extra)
    chunk_extra = hash_method.digest()
    dkey = bytearray(32)
    dkey[:20] = chunk
    dkey[20:] = chunk_extra[:12]

    cipher = AES.new(dkey, AES.MODE_CBC, iv=iv)
    plaintext = cipher.decrypt(data)
    return plaintext

parser = argparse.ArgumentParser()
parser.add_argument("filename", help="File to be decrypted")
parser.add_argument("-k", "--key", required=True, help="Key to decrypt the config file")
args = parser.parse_args()
print(args)

#Retrieve data from windows.dll
cwd = os.getcwd()
cfg_path = ("{}\{}".format(cwd, args.filename))
fp_cfg = open(cfg_path, "rb")
cfg = bytearray(fp_cfg.read())
fp_cfg.close()
#Decrypt data to get the config
cfg = decrypt_config(cfg, args.key)
cfg = cfg.split()
uid = cfg[0]
iv = cfg[1]
salt = cfg[2]
print("uid: {0}\n iv: {1}\n salt: {2}\n".format(uid, iv, salt))
print("salt length: {0}, iv length: {1}\n".format(len(salt), len(iv)))

